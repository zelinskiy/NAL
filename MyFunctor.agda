module MyFunctor where

open import Agda.Primitive
open import MyList
open import MyBool
open import MyNats

const : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {A : Set ‚Ñì‚ÇÅ} {B : Set ‚Ñì‚ÇÇ} ‚Üí A ‚Üí B ‚Üí A
const a _ = a

record Functor {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} (F : Set ‚Ñì‚ÇÅ ‚Üí Set ‚Ñì‚ÇÇ) : Set (lsuc ‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
  infixl 4 _<$>_ _<$_
  field
    fmap : ‚àÄ {A B} ‚Üí (A ‚Üí B) ‚Üí F A ‚Üí F B
  _<$>_ = fmap

  _<$_ : ‚àÄ {A B} ‚Üí A ‚Üí F B ‚Üí F A
  x <$ m = fmap (const x) m

open Functor {{...}} public

functorList : Functor ùïÉ
functorList = record { fmap = map }



