
module NAL.Data.Integer where

open import NAL.Data.Nats renaming (_+_ to _|+|_; _‚â§_ to _|‚â§|_; _*_ to _|*|_; +comm to |+-comm|; _==_ to _|==|_ ) hiding (+0; 0+)
open import NAL.Data.Bool
open import NAL.Utils.Core
open import NAL.Utils.Dependent using (Œ£; Œ£_,_; œÄ‚ÇÅ; œÄ‚ÇÇ)
open import NAL.Data.Either3
open import NAL.Data.Maybe

module Private where
  check : ‚Ñï ‚Üí Set
  check 0 = ‚ä§
  check (suc _) = ùîπ

open Private

data ‚Ñ§ : Set where
  Int : (n : ‚Ñï) ‚Üí check n ‚Üí ‚Ñ§

‚Ñ§0 : ‚Ñ§
‚Ñ§0 = Int 0 ‚ä§-intro

#+_ : ‚Ñï ‚Üí ‚Ñ§
#+ (suc n) = Int (suc n) tt
#+ 0 = Int 0 ‚ä§-intro


#-_ : ‚Ñï ‚Üí ‚Ñ§
#- (suc n) = Int (suc n) ff
#- 0 = Int 0 ‚ä§-intro


module Private2 where
    
  <‚à∏suc : ‚àÄ {x y : ‚Ñï} ‚Üí y < x ‚â° tt ‚Üí Œ£ ‚Ñï (Œª n ‚Üí x ‚à∏ y ‚â° suc n)
  <‚à∏suc {zero} {zero} ()
  <‚à∏suc {zero} {suc y} ()
  <‚à∏suc {suc x} {zero} p = Œ£ x , refl
  <‚à∏suc {suc x} {suc y} p = <‚à∏suc {x} {y} (<-suc2 y x p)
  
  diff‚Ñ§ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñ§
  diff‚Ñ§ x y with ‚Ñï-trichotomy {x} {y}
  ...          | Middle eq = ‚Ñ§0
  ...          | Left lt with <‚à∏suc {y} {x} lt
  ...                        | Œ£ n , _ = Int (suc n) ff
  diff‚Ñ§ x y    | Right gt with <‚à∏suc {x} {y} gt
  ...                         | Œ£ n , _ =  Int (suc n) tt

open Private2

_+_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
(Int 0 _) + y = y
x + (Int 0 _) = x
(Int (suc x) xsign) + (Int (suc y) ysign) with xsign xor ysign
... | ff = Int (suc x |+| suc y) xsign
... | tt = if xsign implies ysign then diff‚Ñ§ y x else diff‚Ñ§ x y

+0 : ‚àÄ (x : ‚Ñ§) ‚Üí x + Int 0 _ ‚â° x
+0 (Int 0 _) = refl
+0 (Int (suc x) xsign) = refl

signum : ‚Ñ§ ‚Üí Maybe ùîπ
signum (Int 0 _) = Nothing
signum (Int (suc _) s) = Just s


+-comm : ‚àÄ (x y : ‚Ñ§) ‚Üí x + y ‚â° y + x
+-comm (Int 0 _) y rewrite +0 y = refl
+-comm x (Int 0 _) = +0 x
+-comm (Int (suc x) xsign) (Int (suc y) ysign) with xsign xor ysign
... | ff = {!!}
... | tt = {!!}

_‚â§_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ùîπ
(Int 0 _) ‚â§ (Int 0 _) = tt
Int 0 _ ‚â§ Int (suc _) ysign = ysign
Int (suc _) xsign ‚â§ Int 0 _ = ¬¨ xsign
Int (suc x) xsign ‚â§ Int (suc y) ysign with xsign xor ysign
... | tt = xsign implies ysign
... | ff = if xsign then x |‚â§| y else (y |‚â§| x)

_==_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ùîπ
a == b = a ‚â§ b ‚àß b ‚â§ a

==-implies-‚â° : ‚àÄ (x y : ‚Ñ§) ‚Üí x == y ‚â° tt ‚Üí x ‚â° y
==-implies-‚â° x y p with inspect (x == y)
==-implies-‚â° x y p | tt with‚â° q = {!!}
==-implies-‚â° x y p | ff with‚â° q = {!!}


neg : ‚Ñ§ ‚Üí ‚Ñ§
neg (Int 0 _) = (Int 0 _)
neg (Int (suc x) s) = Int (suc x) (¬¨ s)

_-_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
x - y = x + neg y

_*_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
(Int 0 _) * (Int 0 _) = (Int 0 _)
(Int 0 _) * _ = (Int 0 _)
_ * (Int 0 _) = (Int 0 _)
(Int (suc x) xsign) * (Int (suc y) ysign) = Int (suc x |*| suc y) (xsign equiv ysign)
