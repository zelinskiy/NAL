module NAL.Examples.LCHI.Part2 where

open import NAL.Data.String
open import NAL.Data.List
open import NAL.Data.ListSet renaming (_โช_ to _โชLS_; _โฉ_ to _โฉLS_;  _โ_ to _โLS_)
open import NAL.Data.Eq hiding (_is_)
open import NAL.Data.Comparable
open import NAL.Data.Bin
open import NAL.Data.Pair
open import NAL.Data.Nats hiding (โค-trans; โค-refl; even) renaming (_โค_ to _โคโ_)
open import NAL.Data.Triple
open import NAL.Data.Either
open import NAL.Data.Show
open import NAL.Data.Maybe
open import NAL.Data.Bool renaming (ยฌ_ to not๐น; _โง_ to and๐น; _โจ_ to or๐น)
open import NAL.Utils.Core renaming (โฅ to Bot)
open import NAL.Utils.Function

infixr 20 ยฌ_
infixl 15 _โง_ _โจ_
infixr 10 _โ_
infixr 10 _โ_

data ฮฆ : Set where
  var : String โ ฮฆ
  โฅ : ฮฆ
  _โ_ : ฮฆ โ ฮฆ โ ฮฆ
  _โจ_ : ฮฆ โ ฮฆ โ ฮฆ
  _โง_ : ฮฆ โ ฮฆ โ ฮฆ

instance
  showฮฆ : Show ฮฆ
  showฮฆ = record {show = helper}
    where
      helper : ฮฆ โ String
      helper (var x) = x
      helper (โฅ) = "_|_"
      helper (ฯ โ ฯ) = primStringAppend (primStringAppend (helper ฯ) " -> ") (helper ฯ)
      helper (ฯ โจ ฯ) = primStringAppend (primStringAppend (helper ฯ) " โ\\/ ") (helper ฯ)
      helper (ฯ โง ฯ) = primStringAppend (primStringAppend (helper ฯ) " /\\ ") (helper ฯ)


ยฌ_ : ฮฆ โ ฮฆ
ยฌ a = a โ โฅ

_โ_ : ฮฆ โ ฮฆ โ ฮฆ
a โ b = a โ b โง b โ a

Context = ๐ ฮฆ

_[_:=_] : ฮฆ โ String โ ฮฆ โ ฮฆ
var y [ x := ฯ ] with y is x
...  | tt = ฯ
...  | ff = var y
โฅ [ x := ฯ ] = โฅ
(P โ Q) [ x := ฯ ] = (P [ x := ฯ ] ) โ ( Q [ x := ฯ ] )
(P โจ Q) [ x := ฯ ] = (P [ x := ฯ ] ) โจ ( Q [ x := ฯ ] )
(P โง Q) [ x := ฯ ] = (P [ x := ฯ ] ) โง ( Q [ x := ฯ ] )


infix 5 _โข_
data _โข_ : Context โ ฮฆ โ Set where
  Ax : โ {ฮ ฯ} โ ฯ :: ฮ โข ฯ 
  โI : โ {ฮ ฯ ฯ} โ ฯ :: ฮ โข ฯ โ ฮ โข ฯ โ ฯ
  โE : โ {ฮ ฯ ฯ} โ ฮ โข ฯ โ ฯ โ ฮ โข ฯ โ ฮ โข ฯ
  
  โงI : โ {ฮ ฯ ฯ} โ ฮ โข ฯ โ ฮ โข ฯ โ ฮ โข ฯ โง ฯ
  โงEโ : โ {ฮ ฯ ฯ} โ ฮ โข ฯ โง ฯ โ ฮ โข ฯ
  โงEโ : โ {ฮ ฯ ฯ} โ ฮ โข ฯ โง ฯ โ ฮ โข ฯ

  โจIโ : โ {ฮ ฯ ฯ} โ ฮ โข ฯ โ ฮ โข ฯ โจ ฯ
  โจIโ : โ {ฮ ฯ ฯ} โ ฮ โข ฯ โ ฮ โข ฯ โจ ฯ
  โจE : โ {ฮ ฯ ฯ ฯ} โ ฮ โข ฯ โจ ฯ โ ฮ โข ฯ โ ฯ โ ฮ โข ฯ โ ฯ โ ฮ โข ฯ
  
  FalseE : โ {ฮ ฯ ฯ} โ ฮ โข ยฌ ฯ โ ฮ โข ฯ โ ฯ

Valuation : โ {โ} โ Set โ โ Set โ
Valuation A = String โ A

postulate
  Weak : โ {ฮ ฯ ฯ} โ ฮ โข ฯ โ ฯ :: ฮ โข ฯ
  Sub : โ {ฮ ฯ ฯ p} โ ฮ โข ฯ โ map (_[ p := ฯ ]) ฮ โข ฯ [ p := ฯ ]
  Exchange : โ {n ฮ ฯ} โ ฮ โข ฯ โ exchange n ฮ โข ฯ


module ๐น-ExhaustiveValidityChecking where

  checkValidityEx : ฮฆ โ Valuation ๐น โ ๐น
  checkValidityEx (var x) v = v x
  checkValidityEx โฅ v = ff
  checkValidityEx (f โ g) v = or๐น (not๐น (checkValidityEx f v)) (checkValidityEx g v)
  checkValidityEx (f โจ g) v = or๐น (checkValidityEx f v) (checkValidityEx g v)
  checkValidityEx (f โง g) v = and๐น (checkValidityEx f v) (checkValidityEx g v)

  getVariables : ฮฆ โ ๐ String
  getVariables f = nub (h f)
    where
      h : ฮฆ โ ๐ String
      h (var x) = [ x ]
      h โฅ = []
      h (p โ q) = h p ++ h q
      h (p โจ q) = h p ++ h q
      h (p โง q) = h p ++ h q


  funFromPairs : โ {โโ โโ} {A : Set โโ}{B : Set โโ}{{_ : Comparable A}} โ โฏB โ ๐ โช A , B โซ โ (A โ B)
  funFromPairs def xs a with lookup xs a
  ... | Just b = b
  ... | Nothing = def --This will newer happen though

  fillLeft : โ {โ} {A : Set โ} โ A โ โ โ ๐ A โ ๐ A
  fillLeft e 0 xs = xs
  fillLeft e (suc n) xs with (suc n) โคโ length xs
  ... | tt = xs
  ... | ff = e :: fillLeft e n xs

  getPosVals : ฮฆ โ ๐ (Valuation ๐น)
  getPosVals p = map (funFromPairs ff โ zipLists vs) (map btrans (range 0 (pred (2 ^ z))))
    where
      vs = getVariables p
      z = length vs
      btrans = (fillLeft ff z) โ to๐น โ fromโ

  isValid : ฮฆ โ ๐น
  isValid ฯ = and (map (checkValidityEx ฯ) (getPosVals ฯ))

  Exx0 = var "A" โ (var "B" โ var "A")
  Exx1 = var "A" โ var "B" โ var "C"




module โข-examples where
  Ex1 : โ {ฯ} โ [] โข ฯ โ ฯ
  Ex1 {ฯ} = โI Ax

  Ex2 : โ{ฯ ฯ} โ [] โข ฯ โ (ฯ โ ฯ)
  Ex2 {ฯ} {ฯ} = โI (โI (Weak Ax))

  Ex3 : โ{ฯ ฯ ฮฝ} โ [] โข (ฯ โ (ฯ โ ฮฝ)) โ (ฯ โ ฯ) โ (ฯ โ ฮฝ)
  Ex3 {ฯ} {ฯ} {ฮฝ} = โI (โI (โI (โE {ฮ}{ฯ}{ฮฝ} (โE{ฮ}{ฯ}{ฯ โ ฮฝ}(Exchange {3} {ฮ} (Weak (Weak Ax))) Ax) (โE (Weak Ax) Ax))))
    where ฮ = ฯ :: (ฯ โ ฯ) :: (ฯ โ (ฯ โ ฮฝ)) :: []
  {-
  Ex5 : โ {ฯ ฯ} โ ฯ :: (ฯ โ ฯ) :: [] โข ฯ
  Ex5 = {!!}

  Ex4 : โ{ฯ ฯ} โ (((ฯ โ ฯ) โ ฯ) โ ฯ) :: [] โข ฯ โจ ยฌ ฯ 
  Ex4 {ฯ} {ฯ} = โจIโ (โI {!!})
  -}
  


--๐น = Fin 2
module ๐น-semantics where
  _โฆ_โง : Valuation ๐น โ ฮฆ โ ๐น
  v โฆ var p โง = v p
  v โฆ โฅ โง = ff
  v โฆ ฯ โจ ฯ โง = max (v โฆ ฯ โง) (v โฆ ฯ โง)
  v โฆ ฯ โง ฯ โง = min (v โฆ ฯ โง) (v โฆ ฯ โง)
  v โฆ ฯ โ ฯ โง = max (not๐น (v โฆ ฯ โง)) (v โฆ ฯ โง)

  data Tautology (ฯ : ฮฆ) : Set where
    isTautology : (v : Valuation ๐น) โ v โฆ ฯ โง โก tt โ Tautology ฯ




module โ-semantics where
  -- Arcane BS
  record FieldOfSets {โ}{A : Set โ}{{_ : Eq A}}
    (X : ListSet A)(โ : ListSet (ListSet A)) : Set โ where
    constructor FOS
    field  
      isClosedโช : {A B : ListSet A} โ A โ? X โก tt โ B โ? X โก tt โ
        A โ? โ โก tt โ B โ? โ โก tt โ (A โชLS B) โ? โ โก tt
      isClosedโฉ : {A B : ListSet A} โ A โ? X โก tt โ B โ? X โก tt โ
        A โ? โ โก tt โ B โ? โ โก tt โ (A โฉLS B) โ? โ โก tt
      isClosedโ : {A B : ListSet A} โ A โ? X โก tt โ  A โ? โ โก tt โ
        (X โLS A) โ? โ โก tt
    getX : ListSet A
    getX = X

  _โฆ_โง : โ{โ}{A : Set โ}{{_ : Eq A}}{X : ListSet A}
    {โ : ListSet (ListSet A)}{{_ : FieldOfSets X โ}} โ
    Valuation (ListSet A) โ ฮฆ โ ListSet A
  v โฆ var p โง = v p
  v โฆ โฅ โง = mkLS []
  _โฆ_โง  {{eq}} {{fos}} v (ฯ โจ ฯ) =
    (_โฆ_โง {{eq}} {{fos}} v ฯ) โชLS (_โฆ_โง  {{eq}} {{fos}} v ฯ)
  _โฆ_โง  {{eq}} {{fos}} v (ฯ โง ฯ) =
    (_โฆ_โง {{eq}} {{fos}} v ฯ) โฉLS (_โฆ_โง  {{eq}} {{fos}} v ฯ)
  _โฆ_โง  {{eq}} {{fos}} v (ฯ โ ฯ) =
    (FieldOfSets.getX fos โLS _โฆ_โง {{eq}} {{fos}} v ฯ) โชLS (_โฆ_โง  {{eq}} {{fos}} v ฯ)

  open ๐น-semantics renaming (_โฆ_โง to _โฆ_โง๐น)

  postulate
    Tautoโโ :
      โ{โ}
      {A : Set โ}
      {{eq : Eq A}}
      {X : ListSet A}
      {โ : ListSet (ListSet A)}{{fos : FieldOfSets X โ}} โ
      (ฯ : ฮฆ) โ Tautology ฯ โ  (v : Valuation (ListSet A)) โ
      _โฆ_โง {{eq}} {{fos}} v ฯ โก X
    โโTauto :
      โ{โ}
      {A : Set โ}
      {{eq : Eq A}}
      {X : ListSet A}
      {โ : ListSet (ListSet A)}
      {{fos : FieldOfSets X โ}} โ
      (ฯ : ฮฆ) โ
      (v : Valuation (ListSet A)) โ
      _โฆ_โง {{eq}} {{fos}} v ฯ โก X โ
      Tautology ฯ 



open import NAL.Utils.Function

-- Def 2.3.5 misses absorption laws, why ???

record BooleanAlgebra {โ} (B : Set โ) : Set โ where
  field
   _โช_ _โฉ_ : B โ B โ B
   โ_ : B โ B
   0' 1' : B
   -- Associativity
   โช-assoc : Associative _โช_   
   โฉ-assoc : Associative _โฉ_
   --Commutativity
   โช-comm : Commutative _โช_
   โฉ-comm : Commutative _โฉ_
   --Distributivity
   โช-distr-โฉ : RightDistributive _โช_ _โฉ_
   โฉ-distr-โช : RightDistributive _โฉ_ _โช_
   --Identity
   aโช0โกa : RightIdentity _โช_ 0'
   aโฉ1โกa : RightIdentity _โฉ_ 1'
   --Complement
   -aโชaโก1 : LeftComplement โ_ _โช_ 1'
   -aโฉaโก0 : LeftComplement โ_ _โฉ_ 0'
   -- Absorption
   โฉ-abs-โช : LeftAbsorption _โฉ_ _โช_
   โช-abs-โฉ : LeftAbsorption _โช_ _โฉ_

-- Example : โจ๐น, OR, AND, NOT, 0, 1โฉ
-- Example : โจFin 2, max, min, 1 - x, 0, 1โฉ


record HeytingAlgebra {โ} (B : Set โ) : Set โ where
  field
  --===Lattice part==
   _โช_ _โฉ_ : B โ B โ B      
   --Commutativity
   โช-comm : Commutative _โช_
   โฉ-comm : Commutative _โฉ_
    -- Associativity
   โช-assoc : Associative _โช_   
   โฉ-assoc : Associative _โฉ_
   -- Absorption
   โฉ-abs-โช : LeftAbsorption _โฉ_ _โช_
   โช-abs-โฉ : LeftAbsorption _โช_ _โฉ_
   --Idempotency
   โช-idemp : Idempotent _โช_
   โฉ-idemp : Idempotent _โฉ_   
   --===Bounded Lattice part===
   0' 1' : B
   --Identity
   aโช0โกa : RightIdentity _โช_ 0'
   aโฉ1โกa : RightIdentity _โฉ_ 1'
   --===Pseudo Complement===
   โ_ : B โ B
   --===Relative Pseudo Complement===
   _โ_ : B โ B โ B
   aโaโก1 : โ a โ a โ a โก 1'
   aโฉaโbโกaโฉb : โ a b โ a โฉ (a โ b) โก a โฉ b
   bโฉaโbโกb : โ a b โ b โฉ (a โ b) โก b
   โ-dist : LeftDistributive _โ_ _โฉ_
   โaโกaโ0 : โ a โ โ a โก a โ 0'
   
  _โค_ : B โ B โ Set โ
  a โค b = b โ a โก 1'
  {-
  โช-deMorgan : โ a b โ โ (a โช b) โก (โ a) โฉ (โ b)
  โช-deMorgan a b  = {!!}
  -}

module โ-semantics where
  _โฆ_โง : โ{โ}{โ : Set โ}{{_ : HeytingAlgebra โ}} โ Valuation โ โ ฮฆ โ โ
  _โฆ_โง {{ha}} v (var p) = v p
  _โฆ_โง {{ha}} v โฅ  = 0' where open HeytingAlgebra ha
  _โฆ_โง {{ha}} v (ฯ โจ ฯ) = (v โฆ ฯ โง) โช (v โฆ ฯ โง)  where open HeytingAlgebra ha
  _โฆ_โง {{ha}} v (ฯ โง ฯ) = (v โฆ ฯ โง) โฉ (v โฆ ฯ โง) where open HeytingAlgebra ha
  _โฆ_โง {{ha}} v (ฯ โ ฯ) = (v โฆ ฯ โง) โ (v โฆ ฯ โง) where open HeytingAlgebra ha

  _,_โจ_ : โ{โ}(โ : Set โ) {{_ : HeytingAlgebra โ}} (v : Valuation โ) (ฯ : ฮฆ) โ Set โ
  _,_โจ_ โ {{ha}} v ฯ = v โฆ ฯ โง โก 1' where open HeytingAlgebra ha
  
  _โจ_ : โ{โ}(โ : Set โ) {{_ : HeytingAlgebra โ}} (ฯ : ฮฆ) โ Set โ
  โ โจ ฯ = โ v โ โ , v โจ ฯ 

  โจ_ : โ{โ} โ ฮฆ โ Set (lsuc โ)
  โจ ฯ = โ โ v {{ha}} โ _,_โจ_ โ {{ha}} v ฯ

  Ex1 : โ {ฯ} โ โจ_ {lzero} (ฯ โ ฯ)
  Ex1 {ฯ} โ v {{ha}} with v โฆ ฯ โง
  ... | ฯ' = aโaโก1 ฯ' where open HeytingAlgebra ha
{-
  Ex2 : โ {ฯ ฯ} โ โจ_ {lzero} (ฯ โ (ฯ โ ฯ))
  Ex2 {ฯ} {ฯ} โ v {{ha}} with v โฆ ฯ โง | v โฆ ฯ โง
  ... | ฯ' | ฯ' = {!!} where open HeytingAlgebra ha
-}
  _โจแตฃ_ : โ{โ} โ Context โ ฮฆ โ Set (lsuc โ)
  ฮ โจแตฃ ฯ = โ โ v ha โ (โ ฯ โ ฯ โ ฮ โ _,_โจ_ โ {{ha}} v ฯ) โ _,_โจ_ โ {{ha}} v ฯ

  postulate
    Completeness : โ ฮ ฯ โ ฮ โข ฯ โ _โจแตฃ_ {lzero} ฮ ฯ
    Soundness : โ ฮ ฯ โ _โจแตฃ_ {lzero} ฮ ฯ โ ฮ โข ฯ
  
record GodelAlgebra {โ} (G : Set โ) : Set โ where
  field
    heytingAlgebra : HeytingAlgebra G
    propGA : โ a b โ HeytingAlgebra._โช_ heytingAlgebra a b โก HeytingAlgebra.1' heytingAlgebra โ Either (a โก HeytingAlgebra.1' heytingAlgebra) (b โก HeytingAlgebra.1' heytingAlgebra)

BAisHA : โ {โ} {B : Set โ} โ BooleanAlgebra B โ HeytingAlgebra B
BAisHA ba = record
              { _โช_ = _โช_
              ; _โฉ_ = _โฉ_
              ; _โ_ = ฮป x y โ (โ x) โช y
              ; โ_ = โ_
              ; 0' = 0'
              ; 1' = 1'
              ; โช-assoc = โช-assoc
              ; โช-comm = โช-comm
              ; โฉ-assoc = โฉ-assoc
              ; โฉ-comm = โฉ-comm
              ; aโช0โกa = aโช0โกa
              ; aโฉ1โกa = aโฉ1โกa
              ; aโaโก1 = -aโชaโก1
              ; โ-dist = ฮป x y z โ rdistr+commโldistr _โช_ _โฉ_ โช-comm โช-distr-โฉ (โ x) y z
              ; aโฉaโbโกaโฉb = p1
              ; bโฉaโbโกb = p2
              ; โฉ-abs-โช = โฉ-abs-โช
              ; โช-abs-โฉ = โช-abs-โฉ
              ; โช-idemp = absorp+idโidemp _โช_ _โฉ_ 1' โช-abs-โฉ aโฉ1โกa
              ; โฉ-idemp = absorp+idโidemp _โฉ_ _โช_ 0' โฉ-abs-โช aโช0โกa
              ; โaโกaโ0 = p3
              }
              where
                open BooleanAlgebra ba
                p1 :  โ a b โ (a โฉ ((โ a) โช b)) โก (a โฉ b)
                p1 a b rewrite
                    โฉ-comm a ((โ a) โช b)
                  | โฉ-distr-โช a (โ a) b
                  | -aโฉaโก0 a
                  | โช-comm 0' (b โฉ a)
                  | aโช0โกa (b โฉ a)
                  | โฉ-comm b a
                  = refl
                p2 : โ a b โ (b โฉ ((โ a) โช b)) โก b
                p2 a b rewrite
                   โฉ-comm b ((โ a) โช b)
                 | โฉ-distr-โช b (โ a) b
                 | absorp+idโidemp _โฉ_ _โช_ 0' โฉ-abs-โช aโช0โกa b
                 | โฉ-comm (โ a) b
                 | โช-comm (b โฉ (โ a)) b
                 | โช-abs-โฉ b (โ a)
                 = refl
                p3 : โ a โ (โ a) โก ((โ a) โช 0')
                p3 a rewrite aโช0โกa (โ a) = refl

record KripkeModel (C : Set) : Setโ where
  field
    _โค_ : C โ C โ Set
    _โฉ_ : C โ String โ Set
    โค-porder : PartialOrder _โค_
    โฉ-mono : โ {c c' p} โ c โค c' โ c โฉ p โ c' โฉ p
  โค-trans : Transitive _โค_
  โค-trans = tripleA โค-porder
  โค-refl : Reflexive _โค_
  โค-refl = tripleB โค-porder

module KripkeSemantics where

  _,_โจ_ : โ{C : Set} โ (k : KripkeModel C) โ C โ ฮฆ โ Set
  k , w  โจ var x = w โฉ x where open KripkeModel k
  k , w  โจ โฅ  = Bot
  k , w  โจ (f โ g) = โ {w'} โ w โค w' โ k , w' โจ f โ k , w' โจ g where open KripkeModel k
  k , w  โจ (f โง g) = โช (k , w โจ f) , (k , w โจ g) โซ
  k , w  โจ (f โจ g) = Either (k , w โจ f) (k , w โจ g)

  โจ-mono : โ {C : Set} {k : KripkeModel C} {wโ wโ : C} {ฯ : ฮฆ} โ
         KripkeModel._โค_ k wโ wโ โ
         k , wโ โจ ฯ โ
         k , wโ โจ ฯ
  โจ-mono {k = k}{ฯ = var x} r p = KripkeModel.โฉ-mono k r p
  โจ-mono {ฯ = โฅ} r p = p
  โจ-mono {k = k}{ฯ = a โ b} r p r' p' = p (โค-trans r r') p' where open KripkeModel k
  โจ-mono {ฯ = ฯ โจ ฯ} r (Left p) = Left (โจ-mono {ฯ = ฯ} r p)
  โจ-mono {ฯ = ฯ โจ ฯ} r (Right p) = Right (โจ-mono {ฯ = ฯ} r p)
  โจ-mono {ฯ = ฯ โง ฯ} r (โจ ฯ' , ฯ' โฉ) = โจ โจ-mono {ฯ = ฯ} r ฯ' ,  โจ-mono {ฯ = ฯ} r ฯ' โฉ

  _,_โจแตฃ_ : โ {C : Set} โ (k : KripkeModel C) โ C โ Context โ Set
  k , w โจแตฃ [] = โค
  k , w โจแตฃ (f :: ฮ) = โช (k , w โจ f) , (k , w โจแตฃ ฮ) โซ
  
  โจแตฃ-mono : โ {C : Set}{k : KripkeModel C} {ฮ : Context} {wโ wโ : C} โ
            KripkeModel._โค_ k wโ wโ โ
            k , wโ โจแตฃ ฮ โ
            k , wโ โจแตฃ ฮ
  โจแตฃ-mono {C} {k} {[]} _ _ = โค-intro
  โจแตฃ-mono {C} {k} {f :: ฮ} r โจ u , v โฉ =
    โจ โจ-mono {C} {k} {ฯ = f} r u , โจแตฃ-mono {C} {k} {ฮ} r v โฉ
  
  _โฉ_ : Context โ ฮฆ โ Setโ
  ฮ โฉ f = โ {C : Set}{k : KripkeModel C} {w : C} โ k , w โจแตฃ ฮ โ k , w โจ f
{-
  KripkeSound : โ {ฮ : Context} {ฯ : ฮฆ} โ ฮ โข ฯ โ ฮ โฉ ฯ
  KripkeSound Ax = projโ
  KripkeSound (Weak p) g = KripkeSound p (projโ g)
  KripkeSound (Sub pโ) = {!!}
  KripkeSound (Shift p) = {!!}
  KripkeSound (โI p) g r u =  KripkeSound p โจ u , โจแตฃ-mono r g โฉ
  KripkeSound (โE p q) {C} {k} g = (KripkeSound p g) (KripkeModel.โค-refl k) (KripkeSound q g)
  KripkeSound (โงI p q) h = โจ KripkeSound p h , KripkeSound q h โฉ
  KripkeSound (โงEโ p) h = projโ (KripkeSound p h)
  KripkeSound (โงEโ p) h = projโ (KripkeSound p h)
  KripkeSound (โจIโ p) {C} {k} {w} g = Left (KripkeSound p g)
  KripkeSound (โจIโ p) {C} {k} {w} g = Right (KripkeSound p g)
  KripkeSound (โจE p q h) {C} {k} d with KripkeSound p d
  ... | Left x = (KripkeSound q d) (KripkeModel.โค-refl k) x
  ... | Right x = (KripkeSound h d) (KripkeModel.โค-refl k) x
  KripkeSound (FalseE p) q r h = {!!}
-}

module IPC where

  data IPC : Set where
    var' : String โ IPC
    _โ'_ : IPC โ IPC โ IPC

  data _โข'_ : ๐ IPC โ IPC โ Set where
    Ax' : โ {ฮ ฯ} โ ฯ :: ฮ โข' ฯ 
    โI' : โ {ฮ ฯ ฯ} โ ฯ :: ฮ โข' ฯ โ ฮ โข' ฯ โ' ฯ
    โE' : โ {ฮ ฯ ฯ} โ ฮ โข' ฯ โ' ฯ โ ฮ โข' ฯ โ ฮ โข' ฯ

  infix 6 _โข'_
  infixr 10 _โ'_

  embed : IPC โ ฮฆ
  embed (var' x) = var x
  embed (ฯ โ' ฯ) = (embed ฯ) โ (embed ฯ)

  instance
    showIPC : Show IPC
    showIPC = record {show = helper}
      where
        helper : IPC โ String
        helper (var' x) = x
        helper (ฯ โ' ฯ) = primStringAppend (primStringAppend (helper ฯ) " -> ") (helper ฯ)

  open KripkeSemantics

  IPCcomp : โ {ฮ ฯ} โ ฮ โข' ฯ โ map embed ฮ โฉ embed ฯ
  IPCcomp Ax' = projโ
  IPCcomp (โI' ip) g r u = IPCcomp ip โจ u , โจแตฃ-mono r g โฉ
  IPCcomp (โE' ip iq) {C} {k} g = (IPCcomp ip g) (KripkeModel.โค-refl k) (IPCcomp iq g)
